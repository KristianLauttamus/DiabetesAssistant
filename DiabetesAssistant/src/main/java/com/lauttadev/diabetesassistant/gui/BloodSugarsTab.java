package com.lauttadev.diabetesassistant.gui;

import com.lauttadev.diabetesassistant.models.BloodSugar;
import com.lauttadev.diabetesassistant.models.Insulin;
import com.lauttadev.diabetesassistant.models.TimedInsulin;
import com.lauttadev.diabetesassistant.repositories.Database;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.MatteBorder;

/**
 *
 * @author Kristian
 */
public final class BloodSugarsTab extends javax.swing.JPanel {
    private final Database<BloodSugar> bloodSugarDatabase;
    private final Database<Insulin> insulinDatabase;
    private final Database<TimedInsulin> timedInsulinDatabase;
    
    /**
     * Creates new form BloodSugarsTab
     * @param bloodSugarDatabase
     * @param insulinDatabase
     */
    public BloodSugarsTab(Database<BloodSugar> bloodSugarDatabase, Database<Insulin> insulinDatabase, Database<TimedInsulin> timedInsulinDatabase) {
        this.bloodSugarDatabase = bloodSugarDatabase;
        this.insulinDatabase = insulinDatabase;
        this.timedInsulinDatabase = timedInsulinDatabase;
        
        initComponents();
        
        // Layout to lists
        this.bloodsugars_list.setLayout(new GridBagLayout());
        this.timedinsulins_list.setLayout(new GridBagLayout());
        
        // Update lists
        this.updateBloodSugars();
        this.updateTimedInsulins();
        
        
        // Lets update insulins list
        this.updateInsulinsComboBox();
        
        DateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm");
        Date today = Calendar.getInstance().getTime();
        timestamp.setText(df.format(today));
        Timer t = new Timer(1000, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                DateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm");
                
                Date today = Calendar.getInstance().getTime();
                
                timestamp.setText(df.format(today));
            }
        });
        t.start();
        
        bloodsugar_warning_label.setVisible(false);
    }
    
    public void updateInsulinsComboBox(){
        ArrayList<Insulin> insulins = this.insulinDatabase.all();
        ArrayList<String> list = new ArrayList();
        list.add("Ei insuliiniä");
        
        for (Insulin insulin : insulins) {
            list.add(insulin.toString());
        }
        
        this.insulins_combo_box.setModel(new javax.swing.DefaultComboBoxModel(list.toArray()));
        this.insulins_combo_box.setSelectedIndex(0);
        
        this.insulins_combo_box.revalidate();
        this.insulins_combo_box.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add_bloodsugar = new javax.swing.JButton();
        bloodsugar = new javax.swing.JTextField();
        timestamp = new javax.swing.JLabel();
        insulin_notify_label = new javax.swing.JLabel();
        insulin_notify_label1 = new javax.swing.JLabel();
        bloodsugar_warning_label = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        remember_insulins = new javax.swing.JScrollPane();
        timedinsulins_list = new javax.swing.JPanel();
        recent_bloodsugars = new javax.swing.JScrollPane();
        bloodsugars_list = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        carbohydrates = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        insulins_combo_box = new javax.swing.JComboBox();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        add_bloodsugar.setBackground(new java.awt.Color(240, 240, 220));
        add_bloodsugar.setText("Lisää verensokeri");
        add_bloodsugar.setBorder(new javax.swing.border.MatteBorder(null));
        add_bloodsugar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add_bloodsugarMouseClicked(evt);
            }
        });

        bloodsugar.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bloodsugar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bloodsugar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bloodsugarKeyTyped(evt);
            }
        });

        timestamp.setText("Timestamp");
        timestamp.setName("timestamp"); // NOI18N

        insulin_notify_label.setText("Muistettavat insuliinit");

        insulin_notify_label1.setText("Viimeisimmät verensokerimittaukset");

        bloodsugar_warning_label.setForeground(new java.awt.Color(255, 0, 0));
        bloodsugar_warning_label.setText("Sallitut syötteet ovat HI, LO, XX.XX");

        jSplitPane2.setDividerLocation(290);
        jSplitPane2.setDividerSize(4);

        remember_insulins.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        remember_insulins.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout timedinsulins_listLayout = new javax.swing.GroupLayout(timedinsulins_list);
        timedinsulins_list.setLayout(timedinsulins_listLayout);
        timedinsulins_listLayout.setHorizontalGroup(
            timedinsulins_listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );
        timedinsulins_listLayout.setVerticalGroup(
            timedinsulins_listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
        );

        remember_insulins.setViewportView(timedinsulins_list);

        jSplitPane2.setLeftComponent(remember_insulins);

        recent_bloodsugars.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout bloodsugars_listLayout = new javax.swing.GroupLayout(bloodsugars_list);
        bloodsugars_list.setLayout(bloodsugars_listLayout);
        bloodsugars_listLayout.setHorizontalGroup(
            bloodsugars_listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
        );
        bloodsugars_listLayout.setVerticalGroup(
            bloodsugars_listLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        recent_bloodsugars.setViewportView(bloodsugars_list);

        jSplitPane2.setRightComponent(recent_bloodsugars);

        jLabel1.setText("Verensokeri");

        jLabel2.setText("Hiilihydraatit");

        carbohydrates.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Valitse insuliini");

        insulins_combo_box.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(insulin_notify_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(insulin_notify_label1)))
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timestamp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bloodsugar_warning_label))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bloodsugar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(carbohydrates, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(insulins_combo_box, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(add_bloodsugar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insulin_notify_label)
                    .addComponent(insulin_notify_label1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_bloodsugar)
                    .addComponent(bloodsugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(carbohydrates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(insulins_combo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodsugar_warning_label)
                    .addComponent(timestamp))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void add_bloodsugarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_bloodsugarMouseClicked
        if("HI".contains(bloodsugar.getText()) || "LO".contains(bloodsugar.getText()) || bloodsugar.getText().matches("^[0-9]+\\.?([0-9]+)?$")){
            addBloodSugar();
        }
    }//GEN-LAST:event_add_bloodsugarMouseClicked
    
    private boolean checkIfValidBloodSugar(){
        return !this.bloodsugar.getText().equals("") && ("HI".equals(bloodsugar.getText().toUpperCase()) || "LO".equals(bloodsugar.getText().toUpperCase()) || bloodsugar.getText().matches("^[0-9]+\\.?([0-9]+)?$"));
    }
    
    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        this.updateInsulinsComboBox();
        this.updateTimedInsulins();
    }//GEN-LAST:event_formFocusGained

    private void bloodsugarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bloodsugarKeyTyped
        if(this.checkIfValidBloodSugar()){
            this.bloodsugar_warning_label.setVisible(false);
            this.add_bloodsugar.setEnabled(true);
        } else {
            this.bloodsugar_warning_label.setVisible(true);
            this.add_bloodsugar.setEnabled(false);
        }
    }//GEN-LAST:event_bloodsugarKeyTyped

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        this.updateInsulinsComboBox();
    }//GEN-LAST:event_formComponentShown
    
    /**
     * Add BloodSugar to database and to the list
     */
    private void addBloodSugar(){
        if(this.checkIfValidBloodSugar()){
            BloodSugar bloodSugar = new BloodSugar(this.bloodsugar.getText());;
            
            if(this.insulins_combo_box.getSelectedIndex() != 0){
                    bloodSugar = new BloodSugar(this.bloodsugar.getText(), insulinDatabase.all().get(this.insulins_combo_box.getSelectedIndex()-1), insulinDatabase.all().get(this.insulins_combo_box.getSelectedIndex()-1).calculateAmount(Integer.valueOf(this.carbohydrates.getText()), bloodSugar), false);
            }

            bloodSugarDatabase.add(bloodSugar);
            this.bloodsugar.setText("");
            addBloodSugarToList(bloodSugar, true);
            bloodSugarDatabase.save();
        } else {
            this.add_bloodsugar.setEnabled(false);
        }
    }
    
    /**
     * Add given BloodSugar into the list of recent BloodSugars
     * @param bloodsugar 
     */
    private void addBloodSugarToList(final BloodSugar bloodsugar, boolean refresh){
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.weightx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        SimpleDateFormat formatter = new SimpleDateFormat("hh:mm", Locale.ENGLISH);
        JPanel paneeli = new JPanel();
        paneeli.add(new JLabel(formatter.format(bloodsugar.getMeasuredAt()) + " - " + bloodsugar.getBloodSugar()));
        
        if(bloodsugar.getInsulinName() != null){
            // Take Insulin -button
            final JButton btn = new JButton(bloodsugar.getInsulinName() + " - " + bloodsugar.getInsulinAmount());
            paneeli.add(btn);
            btn.addActionListener(new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    bloodsugar.takeInsulin();
                    btn.setEnabled(false);
                    bloodSugarDatabase.save();
                }
            });
            if(bloodsugar.isInsulinTaken()){
                btn.setEnabled(false);
            }
        }

        // Remove -button
        final JButton btnRemove = new JButton("Poista");
        paneeli.add(btnRemove);
        btnRemove.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                bloodSugarDatabase.delete(bloodsugar);
                bloodsugars_list.remove(btnRemove.getParent());
                bloodsugars_list.revalidate();
                bloodsugars_list.repaint();
            }
        });
        
        paneeli.setBorder(new MatteBorder(0, 0, 1, 0, Color.GRAY));
        this.bloodsugars_list.add(paneeli, gbc, 0);
        
        // Refresh only if boolean true
        if(refresh){
            bloodsugars_list.revalidate();
            bloodsugars_list.repaint();
        }
    }
    
    /**
     * Update list of recent BloodSugars
     */
    private void updateBloodSugars(){
        ArrayList<BloodSugar> bsl = bloodSugarDatabase.all();
        
        this.bloodsugars_list.removeAll();
        
        GridBagConstraints gbcTemp = new GridBagConstraints();
        gbcTemp.gridwidth = GridBagConstraints.REMAINDER;
        gbcTemp.weightx = 1;
        gbcTemp.weighty = 1;
        this.bloodsugars_list.add(new JPanel(), gbcTemp);

        for (final BloodSugar bs : bsl) {
            this.addBloodSugarToList(bs, false);
        }
        
        this.bloodsugars_list.revalidate();
        this.bloodsugars_list.repaint();
    }
    
    /**
     * Add TimedInsulin to list and show the button if its not taken for today
     * @param timedInsulin
     * @param refresh 
     */
    private void addTimedInsulinToList(final TimedInsulin timedInsulin, boolean refresh){
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.weightx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        SimpleDateFormat formatter = new SimpleDateFormat("hh:mm", Locale.ENGLISH);
        JPanel paneeli = new JPanel();
        paneeli.add(new JLabel(formatter.format(timedInsulin.getShouldAt().getTime())));
        
        // Take Insulin -button
        final JButton btn = new JButton(timedInsulin.getInsulinName() +
                " - " + timedInsulin.getAmount());
        paneeli.add(btn);
        btn.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                timedInsulin.take();
                btn.setEnabled(false);
                timedInsulinDatabase.save();
            }
        });
        if(timedInsulin.isTaken()){
            btn.setEnabled(false);
        }
        
        paneeli.setBorder(new MatteBorder(0, 0, 1, 0, Color.GRAY));
        this.timedinsulins_list.add(paneeli, gbc, 0);
        
        // Refresh only if boolean true
        if(refresh){
            timedinsulins_list.revalidate();
            timedinsulins_list.repaint();
        }
    }
    
    /**
     * Update TimedInsulins
     */
    private void updateTimedInsulins(){
        ArrayList<TimedInsulin> til = timedInsulinDatabase.all();
        
        this.timedinsulins_list.removeAll();
        
        GridBagConstraints gbcTemp = new GridBagConstraints();
        gbcTemp.gridwidth = GridBagConstraints.REMAINDER;
        gbcTemp.weightx = 1;
        gbcTemp.weighty = 1;
        this.timedinsulins_list.add(new JPanel(), gbcTemp);

        for (final TimedInsulin ti : til) {
            this.addTimedInsulinToList(ti, false);
        }
        
        this.timedinsulins_list.revalidate();
        this.timedinsulins_list.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_bloodsugar;
    private javax.swing.JTextField bloodsugar;
    private javax.swing.JLabel bloodsugar_warning_label;
    private javax.swing.JPanel bloodsugars_list;
    private javax.swing.JTextField carbohydrates;
    private javax.swing.JLabel insulin_notify_label;
    private javax.swing.JLabel insulin_notify_label1;
    private javax.swing.JComboBox insulins_combo_box;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JScrollPane recent_bloodsugars;
    private javax.swing.JScrollPane remember_insulins;
    private javax.swing.JPanel timedinsulins_list;
    private javax.swing.JLabel timestamp;
    // End of variables declaration//GEN-END:variables
}
